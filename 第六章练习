//6-1
//函数在一个字符串中进行搜索，查找所有在一个给定字符集合中出现的字符
//函数原型：char *find_char( char const *source, char const *chars);


#include<stdio.h>
#include<string.h>
char *find_char(char const *source, char const *chars)
{
	const char *p;                   
	if (source == NULL || chars == NULL)            //如果source与chars都为空则直接返回NULL
		return NULL;
	else                                            //
	{
		while ( *(source++) != '\0')
    //(1)++操作符产生source的一份拷贝(2)++操作符增加source的值(3)最后在source的拷贝上执行间接访问操作
		for (p = chars; *p != '\0';p++)
				if (*source == *p)
					return (char*)source ;                  //返回一个char*型指针
	}
	return NULL;
}
 
int main()
{
	char *p = "ABC";
	char *q = "XRCQEF";
	char *result; 
	result = find_char(p,q);
	printf("result:%s\n",result);
	getchar();
	return 0;
}

/*
定义：左值与右值的定义在于一个赋值等号，赋值等号左边成为左值，等号右边成为右值

左值（L-value）：表示存储在计算机内存的对象，可寻址，相当于地址值

右值（R-value）：代表的为真实值，可读，即数据值
*/





//6-2
//请编写一个函数删除一个字符串的一部分 函数原型如下
//     int del_substr(char *str,char const *substr)
//应该先判断substr是否出现在str中。未出现返回0 出现，函数应该把str中位于该字串后面的所有字符复制到该字串的位置，从而删除这个
//子串，然后函数返回1.如果substr多次出现在str中，函数只删除第一次出现的子串。函数的第二个参数绝不会被修改。
//举个例子，假定str指向FGH、CDF或者XABC、函数应该返回0，str未作任何修改。但是如果substr指向CDE,函数就把str修改为指向ABFG，
//方法是把F、G和结尾的NULL字节复制到C的位置，然后函数返回1. 不论出现什么情况，函数的第2个参数都不应该被修改。
