/*
   8-1  初始化数组中特定位置为特定的值
*/

int main()
{
    char char_value[3][6][4][5] = {0};
    char char_value[1][1][1][1] = {' '};
}


/*
    8-2 计算税收
*/

float single_tex(float income)
{
    ?if elseif就行了？
}

/*
     8-3  8-4  单位矩阵 
*/
     int identity_matrix(int **a, int x)
{
	int i, j,q,p;

	a = (int**)malloc(sizeof(int*) * x);
	//为二维数组分配x行

	for (i = 0; i < x; ++i)
	{  
		a[i] = (int*)malloc(sizeof(int) * 4);
	}//为每列分配x个大小空间

	printf("初始化数组:\n");
    for(i = 0;i<x;i++)
		for (j = 0; j < x; j++)
		{
			a[i][j] = 0;
		}
	
	for (i = 0; i < x; i++)
		a[i][i] = 1;

	for (i = 0; i < x; ++i)
	{
		for (j = 0; j < x; ++j) {
			printf("%d ", a[i][j]);
		}
		printf("\n");
	} //输出测试
    
	printf("输入：\n");
	scanf("%d %d", &q, &p);
	a[q][p] = 1;
	

	for (i = 0; i < x; ++i) 
	{
		for (j = 0; j < x; ++j) {
			printf("%d ", a[i][j]);
		}
		printf("\n");
	} //输出测试


	for (i = 0; i < x; i++)
	{
		for (j = 0; j < x; j++)
		{
			if (i == j&&a[i][j] != 1)//判断对角线元素是否非1
			{ 
					printf("不是呢啥矩阵\n");
					return 0;     //否则直接退出
			}
			else if (i !=j&&a[i][j] != 0)      //判断非对角线元素是否非零
				{     
					printf("不是呢啥矩阵\n");
					return 0;
				}
		}
	}printf("是那啥矩阵\n");
	  
	system("pause");

	for (i = 0; i < x; ++i) 
	{
		free(a[i]);
	}
	free(a);//释放动态开辟的空间

	system("pause");
	return TURE;
}


/*  8-5 矩阵相乘  */
/*  x行y列矩阵与y行z列矩阵相乘结果是另一个x行y列的矩阵c  */
/*  函数原型为：
        void matrix_multiply(int *m1,int *m2,int *r,int x,int y,int z);
*/

// 动态初始化二维数组
// Ci,j = 
void matrix_multiply(int *m1,int *m2,int *r,int x,int y,int z)
{
     
}

















